int main()
{

    srand(time(NULL));
    system("chcp 1251");
    system("cls");
    /*
    stack<int> Stack;
    stack<Edge> Edges;
    int req;
    Edge e;
    int mas[7][7] = { { 0, 1, 1, 0, 0, 0, 1 }, // матрица смежности
    { 1, 0, 1, 1, 0, 0, 0 },
    { 1, 1, 0, 0, 0, 0, 0 },
    { 0, 1, 0, 0, 1, 0, 0 },
    { 0, 0, 0, 1, 0, 1, 0 },
    { 0, 0, 0, 0, 1, 0, 1 },
    { 1, 0, 0, 0, 0, 1, 0 } };
    int nodes[7]; // вершины графа
    for (int i = 0; i < 7; i++) // исходно все вершины равны 0
        nodes[i] = 0;
    cout << "N = ";
    cin >> req;
    req--;
    Stack.push(0); // помещаем в очередь первую вершину
    while (!Stack.empty())
    { // пока стек не пуст
        int node = Stack.top(); // извлекаем вершину
        Stack.pop();
        if (nodes[node] == 2) continue;
        nodes[node] = 2; // отмечаем ее как посещенную
        for (int j = 6; j >= 0; j--)
        { // проверяем для нее все смежные вершины
            if (mas[node][j] == 1 && nodes[j] != 2)
            { // если вершина смежная и не обнаружена
                Stack.push(j); // добавляем ее в cтек
                nodes[j] = 1; // отмечаем вершину как обнаруженную
                e.begin = node; e.end = j;
                Edges.push(e);
                if (node == req) break;
            }
        }
        cout << node + 1 << endl; // выводим номер вершины
    }
    cout << "Путь до вершины " << req + 1 << endl;
    cout << req + 1;
    while (!Edges.empty())
    {
        e = Edges.top();
        Edges.pop();
        if (e.end == req)
        {
            req = e.begin;
            cout << " <- " << req + 1;
        }
    }
    cin.get(); cin.get();
    */

    // 1 матрица

    int arr1[5][5]{ 0 };

    for (int i = 0; i != 5; i++) {
        int flag = 0; //если есть несвязанная вершина

        for (int j = 0; j != 5; j++) {

            int p = rand() % 101;

            if (i == j) {
                arr1[i][j] = 0;
                continue;
            }

            if (arr1[i][j] == 1) {
                flag++;
                continue;
            }

            if (p > 65) {
                flag++;
                arr1[i][j] = 1;
                arr1[j][i] = 1;
            }
        }

        if (flag == 0) {
            if (i <= 3) {
                arr1[i][i + 1] = 1; //тк больше 4 не будет
                arr1[i + 1][i] = 1;
            }
            else {
                arr1[i][i - 1] = 1;
                arr1[i - 1][i] = 1;
            }
        }

    }

    // 2 матрица

    int arr2[5][5]{ 0 };

    for (int i = 0; i != 5; i++) {
        int flag = 0; //если есть несвязанная вершина

        for (int j = 0; j != 5; j++) {

            int p = rand() % 101;

            if (i == j) {
                arr2[i][j] = 0;
                continue;
            }

            if (arr2[i][j] == 1) {
                flag++;
                continue;
            }

            if (p > 65) {
                flag++;
                arr2[i][j] = 1;
                arr2[j][i] = 1;
            }
        }

        if (flag == 0) {
            if (i <= 3) {
                arr2[i][i + 1] = 1; //тк больше 4 не будет
                arr2[i + 1][i] = 1;
            }
            else {
                arr2[i][i - 1] = 1;
                arr2[i - 1][i] = 1;
            }
        }

    }

    
    for (int i = 0; i != 5; i++) {
        Print2(arr1[i], arr2[i], 5);
        cout << endl;
    }
